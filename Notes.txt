====== Testnet credentials ========

Address: rUCap2t57wVepivNkz6axKvzh33jW1R2cF
Secret: sEdVnZcsvnkvcZX3smfwkHzxgxXLSNs

Note: Address is the encoding of the public key
      secret is the encoding of the private key (needs to be kept private)

====== Run this command to generate testnet credentials ======
curl -s -X POST https://faucet.altnet.rippletest.net/accounts

************** Ripple APIs Overview **************

====== Ways to connect to rippled network ======
1. command line
2. JSON-RPC
3. Web socket

======== CONNECT TO RIPPLED ========
API option 2: JSON-RPC
curl -s -X POST "https://s.altnet.rippletest.net:51234" -d @- <<-END 
{ 
    "method": "server_info" , 
    "params": [{}] 
} 
END

API option 3: Web socket (refer documentation)
{
  "id": "my_first_request",
  "command": "server_info",
  "api_version": 1
}

======== Query ledger Data ========
account_info -> this command retrieves information about an account 

1. using JSON-RPC  --> this returns the balance in drops
curl -s -X POST "https://s.altnet.rippletest.net:51234" -d @- <<-END 
{
    "method": "account_info",
    "params": [{"account": "rN8rHSF1z281G29NzwT9MWPWaWRCchD5nG"}]
}
END

2. using getAccountInfo in JavaScript (returns balance in XRP)
api.connect().then(() => {
    const myAddress = 'rJaeYKK27YWzg5FyRQCLQbdgVyiwnbyMgL';
    console.log('Getting account info for', myAddress);
    return api.getAccountInfo(myAddress);
})
NOTE: 1 xrp = 1000000 drops

======== Write Ledger Data (Transactions) ========
> Payment Transaction: represent a transfer of value from one account to another
Steps: 
  - create two testnet accounts
  - Invoke getAccountInfo() to check initial balance for each account
  - run payment.js
  - Invoke getAccountInfo() to verify the updated balance of both accounts after payment transaction
  - Verify the transaction hash

  When we submit a transaction i.e. call submit() method,
  The immediate submit response incidates a provisional result
  {
    "resultCode": "success",
    "resultMessage": "some message"
  }

  Submission of the transaction dosen't mean that the transaction is successfull.
  The final outcome of a transaction is not known until it appears in a validated ledger.

  The response to getTransaction() shows the final, immutable result in the "outcome".
  Note: when using rippled's 'tx' method, look for "validated": true.

================ Multisigning  use cases​ ================

N-factor Auth: ​Store 2 or more keys on different devices, and require all the devices to sign each transaction.​
M-of-N: ​Give keys to multiple people, and require a majority of signers to sign each transaction.​
Delegate a backup plan:​Designate a team of people who can send transactions for you by working together, in case you’re unavailable. Keep using single signatures for normal business.​
Primary and Approvals: ​Use the weights in your signer list to require a specific signer along with at least one other.

****** Payment Multisigning demo ******
1. Create 5 new test accounts (1 sender, 3 signers , 1 receiver)​
2. Use the API call SignerListSet() to enable multisigning with signer accounts.​
      - For this demo, the Signer list will consists of 3 signers with a quorum of 3 , first signer with a weight of 2 and remaining two signers with weight of 1.​
      - The above configuration means the transaction must be signed by first signer and any one of the remaining two signers.​
3. Sign payment transactions using signer’s secret key.​
4. Combine signed transactions.​
5. Submit signed transaction.​
6. Confirm transaction.


======================================================
######### check balance using cmd line ############
const RippleAPI = require('ripple-lib').RippleAPI
const api = new RippleAPI({ server: 'wss://s.altnet.rippletest.net:51233' }) undefined
> const api = new RippleAPI({ server: 'wss://s.altnet.rippletest.net:51233' }) 
undefined
> api.isConnected()
false
> api.connect()

on the dex, you create offers via the OfferCreate transaction and you define which currency you want to sell and which to buy and on what rate and volume
if your offer doesn't get filled immediately it becomes an object in the order book for that pair and is visible to others (just like an exchange's order book)
and anyone can see and match your offer
  
We are planning to build an xrp cross border payment system to reduce transmission fees for which we want to use bitstamp as a DEX and as an issuer.
In our system firstly,we want to deposit fiat and purchase a stablecoin using bitstamp.
Secondly,bitstamp must be using different payment gateways for different countries,so does bitstamp supports fiat from all countries.
If it supports all countries ,will the fiat deposit mechanism different for all countries.
The same process goes for withdrawal,we would need fiat in return for a token,so we will need to configure bank accounts of various countries for withdrawal,is there a mechanism for this.

just set a trustline for a currency and the bot will send you tokens for free. of you need more, buy them via testnet XRP (no value) or create multiple accounts and create a trustline